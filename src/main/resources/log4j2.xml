<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出 -->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数 -->
<configuration status="WARN" monitorInterval="30" packages="biz.paluch.logging.gelf.log4j2">

	<properties>
		<!-- 兼容linux盘符，windows默认在tomcat所在目录的根目录，如D:/logs -->
		<property name="LOG_HOME">/application/logs/sweeporder</property>
		<property name="APP_NAME">sweeporder</property>
		<property name="LOG_PATTERN">[%d{dd HH:mm:ss,SSS} %-5p] [%t] %c{3} - %m%n</property>
	</properties>

	<!--先定义所有的appender -->
	<appenders>
		<!--这个输出控制台的配置 -->
		<console name="Console" target="SYSTEM_OUT">
			<!--输出日志的格式 -->
			<!-- <PatternLayout pattern="[%d{dd HH:mm:ss:SSS}] [%p] - %l - %m%n" /> -->
			<!-- <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/> -->
			<!-- 日志格式延续原有格式 -->
			<PatternLayout pattern="${LOG_PATTERN}"/>
		</console>
		<!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
		<RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/${APP_NAME}_info.log"
			filePattern="${LOG_HOME}/${APP_NAME}_info-%d{yyyy-MM-dd}.log">
			<!--记录level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
			<ThresholdFilter level="INFO" onMatch="ACCEPT"
				onMismatch="DENY" />
			<PatternLayout pattern="${LOG_PATTERN}"/>
			<Policies>
				<TimeBasedTriggeringPolicy modulate="true" interval="1"/>  
			</Policies>
		</RollingFile>
		<!-- 错误日志 -->
		<RollingFile name="RollingFileError" fileName="${LOG_HOME}/${APP_NAME}_error.log"
			filePattern="${LOG_HOME}/${APP_NAME}_error-%d{yyyy-MM-dd}.log">
			<ThresholdFilter level="ERROR" onMatch="ACCEPT"
				onMismatch="DENY" />
			<PatternLayout pattern="${LOG_PATTERN}"/>
			<Policies>
				<TimeBasedTriggeringPolicy modulate="true" interval="1"/>  
			</Policies>
		</RollingFile>
	    
		<!-- https://github.com/mp911de/logstash-gelf/blob/master/README.md -->
		<!-- 该方式可自定义发送字段，并且兼容Graylog2 -->
		<!-- 自定义配置增加要显示的字段 -->
       	<!-- 
       	<Gelf name="Gelf" host="udp:172.16.8.6" port="12201"
			version="1.1" extractStackTrace="true" filterStackTrace="true"
			mdcProfiling="true" includeFullMdc="true" maximumMessageSize="8192"
			originHost="%host{fqdn}" additionalFieldTypes="fieldName1=String,fieldName2=Double,fieldName3=Long">
			
			<Field name="level" pattern="%level" />
			<Field name="thread" pattern="%t" />
			<Field name="simpleClassName" pattern="%C{1}" />
			<Field name="className" pattern="%C" />
			<Field name="projetcName" pattern="${APP_NAME}"/>
		</Gelf>
		 -->
	</appenders>
	<!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
	<loggers>
		<!-- druid配置 -->
		<logger name="druid.sql.Statement" level="debug" additivity="false">
			<appender-ref ref="Console"/>
		</logger>
		
		<root level="INFO">
			<!-- <appender-ref ref="Gelf" /> -->
			<appender-ref ref="Console" />
			<appender-ref ref="RollingFileInfo" />
			<appender-ref ref="RollingFileError" />
		</root>
	</loggers>
</configuration>